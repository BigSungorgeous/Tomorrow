1.  a.SQL注入：SQL注入之所以存在，主要是因为工程师将外部的输入直接嵌入到将要执行的SQL语句中了。黑客可以利用这一点执行SQL指令来达到自己目的。
    b.XSS攻击：如果说SQL注入是直接在SQL里执行了用户输入，那XSS攻击是在HTML里代码执行了用户输入。相对SQL注入，XSS似乎更能引起人关注。几年前新浪微博被人利用XSS获取大量粉丝；3DM也曾经被植入script代码对另一个游戏网站进行了惨无人道的DDOS攻击。
    c.CSRF攻击（跨站点请求伪造）：顾名思义，是伪造请求，冒充用户在站内的正常操作。

2.  baz，bar；
3.  shift,delete,splice
4.  display:none  超出隐藏并且设置高度   position:left
5.  object
6.var x = 0; 
for(var i = 1; i <= 400; i++) { 
     for(var j = 0; j < i.toString().length; j++) { 
           if(i.toString()[j] == "1") //如果包含1
                   x++; //统计1的个数
 }
 }
              alert(x); 
7.  a. GET请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给WEB服务器。当然在Ajax请求中，这种区别对用户是不可见的。
    b. 首先是"GET方式提交的数据最多只能是1024字节"，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。
    c. GET方式请求的数据会被浏览器缓存起来，因此其他人就可以从浏览器的历史记录中读取到这些数据，例如账号和密码等。在某种情况下，GET方式会带来严重的安全问题。而POST方式相对来说就可以避免这些问题。
    d. 在客户端使用get请求时,服务器端使用Request.QueryString来获取参数,而客户端使用post请求时,服务器端使用Request.Form来获取参数.
8.==值比较大小，不比较类型；
  ===既比较内容也比较类型，且+0 = -0，NaN不等于NaN；
9.  a.函数名调用
    b.方法调用
    c.构造函数
10.深拷贝：JSON对象的parse和stringify；
   浅拷贝：对象直接引用；
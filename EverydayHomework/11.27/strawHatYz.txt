<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <pre>
        # 2018年11月27日面试题
        1. 说出3种web安全问题
        XSS:跨站脚本攻击//攻击者在web页面插入恶意的script代码,当浏览时该代码会被执行
            分支:DOM-bassd XSS:利用本地漏洞,这种漏洞会存在于浏览器自身
                Stored XSS:该类型是应用最为广泛而且有可能影响到Web服务器自身安全的漏洞，骇客将攻击脚本上传到Web服务器上，使得所有访问该页面的用户都面临信息泄漏的可能，其中也包括了Web服务器的管理员。
                Reflected XSS:基于反射的XSS攻击，主要依靠站点服务端返回脚本，在客户端触发执行从而发起Web攻击。Web客户端使用Server端脚本生成页面为用户提供数据时，如果未经验证的用户数据被包含在页面中而未经HTML实体编码，客户端代码便能够注入到动态页面中。
        CSRF:[Cross Site Request Forgery】站点伪造请求:跨站点参考伪造通过在访问用户被认为已经通过身份验证的Web应用程序的页面中包含恶意代码或链接来工作。 如果该Web应用程序的会话没有超时，攻击者可能执行未授权的命令
        SQL注入:用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据。

        2. 	
            let fun=()=>{
                console.log(this.foo);//baz,this指向window
                }
                let  c={
                foo:'foo',
                baz:'bar',
                say(){
                fun();
                (function(){
                    console.log(this.baz);//undefined
                }())
                }
                }
                var foo='baz';
                c.say();
        3. 数组移除第一个元素的方法有哪些？
            1.shift();
            2.let arr=["a",2,3];
            console.log(arr.splice(0,1));
        4. 使元素消失的方法有哪些？
        display:none; overflow:hidden;
        visibility:hidden;
        position:absolute,然后使用z-index覆盖
        opacity:0；透明度为0;
        5. var arr=[];
        console.log(typeof arr)  ???
        object
        typeof  会返回几种数据类型
        object,string,function,bunBoolean,undefined,null;


        6. 使用js，返回1到400所有自然数中一共出现过多少次“1”，并返回出现次数 
        let arr=[];
        for(let i=1;i<=400;i++){
            let a=[...i.toString()];
            // console.log(a);
            for(let j=0;j<a.length;j++){
                if(a[j]==1){
                    arr.push(a[j]);
                    console.log(arr.length)//180
                }
            }
        } 
        7. ajax请求的时候get 和post方式的区别
            get:
            1.把请求的数据放在url上，即HTTP协议头上
            2.提交的数据最大是2k
            3.产生一个TCP数据包，浏览器会把http header和data一并发送出去，服务器响应200(返回数据);
            4.在浏览器回退时是无害的，POST会再次提交请求
            5.产生的URL地址可以被Bookmark，而POST不可以。
            6.请求只能进行url编码，而POST支持多种编码方式。
            7.请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。
            8.GET只接受ASCII字符的参数的数据类型，而POST没有限制
            9.get效率高
            post:
            1.post理论上没有字符限制
            2.产生两个TCP数据包，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。

        8. '\=\='和'\=\=\='和Object.is()的不同
        ==相等运算符 ===严格全等运算符
        相等运算符会比较两个值是否相等,严格全等运算符会比较两个是不是同一个值,如果不为同一个值返回flase,而相等运算符会将他们转换为同一个类型,再进行比较
        与object.is的不同为一是+0不等于-0，二是NaN等于自身。
        obj.is(+0,-0)false;
        obk.is(NAN,NAN)ture;
        9. js有几种函数调用方式?
            方法调用模式,函数调用模式,构造器调用模式,apply,call调用模式
        10. js实现对象的深拷贝浅拷贝
        浅拷贝:			var arr=["arr","你好",10];
        function simpleClone(initalObj){
        var obj={};
        for(var i in initalObj){
        obj[i]=initalObj[i]
        }
        return obj
        };
        var newarr=simpleClone(arr);
        console.log(newarr)
        深拷贝:			
        var arr=["a","你好",10];
        function deepClone(initalObj){
        var obj=JSON.parse(JSON.stringify(initalObj));
        return obj;
        }
        var newarr=deepClone(arr);
        console.log(arr);
        console.log(newarr);

    </pre>
</body>
<script>
    2.
    // let fun = () => {
    //     console.log(this.foo); //baz;
    // }
    // let c = {
    //     foo: 'foo',
    //     baz: 'bar',
    //     say() {
    //         fun();//调用
    //         (function () {
    //             console.log(this.baz);//undefined
    //         }())
    //     }
    // }
    // var foo = 'baz';
    // c.say();
    // var c=Array();
    // console.log(typeof []);

    //6.使用js，返回1到400所有自然数中一共出现过多少次“1”，并返回出现次数 
    
    // function exp(num, length) {
    //     var numstr = num.toString();//转化为字符串
    //     var m = numstr.length; //1-400的长度为400;
    //     if (numstr.length >= length) {
    //         return numstr;
    //     }
    //     for (var i = 0; i < length - m; i++) {
    //         numstr = "0" + numstr;
    //     }
    //     return numstr;
    // } //调用函数exp，使用for循环一个个比较 
    // var n;
    // var result = 0;
    // for (n = 1; n <= 400; n++) {
    //     var numstr = exp(n, 3);//n=1-400
    //     for (s = 0; s < numstr.length; s++) {
    //         if (numstr[s] == 1) {
    //             result += 1;
    //         }
    //     }
    // }
    // console.log(result)//180
    // let arr=["a",2,3];
    // console.log(arr.splice(0,1));
    //9.
    //(1)
        // let obj={
        //     name:"lily",
        //     a(){
        //         alert(this.name)
        //     }
        // }
        // obj.a();
    //(2)
        // let add=function(){
        //     alert(this.name);
        //     console.log(this)//请注意this此时指向window
        // }
        // let name="lily";
        // add();
    //(3)
        // let obj=function(name,age){
        //     this.name=name;
        //     this.age=age;
        // }
        // obj.prototype.Sty=function(){
        //     alert(this.name)
        // }
        // let people=new obj("lily","18");
        // console.log(people.Sty());
    //(4)
        //  function add(a,b){
        //      return a+b;
        //  }
        //  add.apply(this,1,2)
        

    let arr=[];
    for(let i=1;i<=400;i++){
        let a=[...i.toString()];
        // console.log(a);
        for(let j=0;j<a.length;j++){
            if(a[j]==1){
                arr.push(a[j]);
                console.log(arr.length)//180
            }
        }
    }
    </script>
</html>